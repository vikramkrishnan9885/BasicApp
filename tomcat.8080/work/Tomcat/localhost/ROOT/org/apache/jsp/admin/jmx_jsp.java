/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.23
 * Generated at: 2019-01-08 18:11:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.management.*;
import java.util.*;

public final class jmx_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.management");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n");
      out.write("    <body>\n");
      out.write("\n");

    try {
        //Step 1 - Get MBean server reference
        ArrayList servers = MBeanServerFactory.findMBeanServer(null);
        if (servers == null)
          throw new Exception("No MBeanServer found.");
        MBeanServer server = (MBeanServer)servers.get(0);
        //Step 2 - Create object to identify MBean
        ObjectName objName = new
        ObjectName("DefaultDomain:service=Logging,type=File");
        //Step 3 - Update MBean with new log file name
        String newvalue = (String)request.getParameter("LogName");
        if (newvalue != null && newvalue.length() > 0) {
            Attribute attr = new Attribute("LogName", newvalue);
            server.setAttribute( objName, attr );
        }
        //Step 4 - Get latest log name attribute
        String value = (String)server.getAttribute( objName,
                       "LogName");

      out.write("\n");
      out.write("\n");
      out.write("MBean     ");
      out.print( objName.getCanonicalName() );
      out.write("\n");
      out.write("\n");
      out.write("<FORM METHOD=\"post\" ACTION=\"jmx.jsp\">\n");
      out.write("  <TABLE ALIGN=\"left\" BORDER=\"1\" WIDTH=\"40%\" CELLPADDING=\"3\">\n");
      out.write("    <TR>\n");
      out.write("      <TH WIDTH=\"23%\"> Attribute </TH><TH WIDTH=\"35%\"> Value </TH>\n");
      out.write("    </TR>\n");
      out.write("    <TR>\n");
      out.write("      <TD><B>LogName</B></A></TD>\n");
      out.write("      <TD><INPUT TYPE=\"text\" NAME=\"LogName\" VALUE=\"");
      out.print( value );
      out.write("\" SIZE=\"34%\"></TD>\n");
      out.write("    </TR>\n");
      out.write("    <TR>\n");
      out.write("      <TD ALIGN=LEFT><INPUT TYPE=\"submit\" VALUE=\"UPDATE\"></TD>\n");
      out.write("    </TR>\n");
      out.write("  </TABLE>\n");
      out.write("</FORM>\n");

       } catch (Exception e) {
           out.println(e.getMessage());
       }

      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
